{"ast":null,"code":"import axios from 'axios';\nimport { getModelById } from '../config/models';\nconst OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';\nclass OpenRouterService {\n  constructor() {\n    this.apiKey = process.env.REACT_APP_OPENROUTER_API_KEY || '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';\n    if (!this.apiKey) {\n      console.warn('OpenRouter API key not found. Please set REACT_APP_OPENROUTER_API_KEY in your environment variables.');\n    }\n  }\n  async improveMarkdown(markdown, prompt, modelId, selectedText = null) {\n    if (!this.apiKey) {\n      throw new Error('API key no configurada. Por favor, configura REACT_APP_OPENROUTER_API_KEY en tu archivo .env');\n    }\n    const textToImprove = selectedText || markdown;\n    const isPartialImprovement = selectedText !== null;\n    const model = getModelById(modelId);\n    const maxTokens = model ? model.maxTokens : 4000;\n    const systemPrompt = isPartialImprovement ? `Eres un experto en escritura y markdown. Mejora SOLO el texto seleccionado manteniendo el formato markdown. Devuelve únicamente el texto mejorado sin explicaciones adicionales.` : `Eres un experto en escritura y markdown. Mejora el documento completo manteniendo la estructura y formato markdown. Devuelve únicamente el markdown mejorado sin explicaciones adicionales.`;\n    const userPrompt = prompt ? `${prompt}\\n\\nTexto a mejorar:\\n${textToImprove}` : `Mejora este ${isPartialImprovement ? 'texto' : 'documento markdown'} haciéndolo más claro, coherente y bien estructurado:\\n\\n${textToImprove}`;\n    try {\n      var _response$data, _response$data$choice, _response$data$choice2, _response$data$choice3;\n      const response = await axios.post(OPENROUTER_API_URL, {\n        model: modelId,\n        messages: [{\n          role: 'system',\n          content: systemPrompt\n        }, {\n          role: 'user',\n          content: userPrompt\n        }],\n        temperature: 0.7,\n        max_tokens: maxTokens,\n        stream: false\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n          'HTTP-Referer': window.location.origin,\n          'X-Title': 'Markdown Preview - Visor Markdown Vitaminado'\n        }\n      });\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data$choice = _response$data.choices) !== null && _response$data$choice !== void 0 && (_response$data$choice2 = _response$data$choice[0]) !== null && _response$data$choice2 !== void 0 && (_response$data$choice3 = _response$data$choice2.message) !== null && _response$data$choice3 !== void 0 && _response$data$choice3.content) {\n        return response.data.choices[0].message.content.trim();\n      } else {\n        throw new Error('Respuesta inválida del modelo');\n      }\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3;\n      console.error('Error calling OpenRouter API:', error);\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        throw new Error('API key inválida. Verifica tu configuración.');\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 429) {\n        throw new Error('Límite de rate excedido. Intenta de nuevo en unos momentos.');\n      } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 402) {\n        throw new Error('Créditos insuficientes en tu cuenta de OpenRouter.');\n      } else {\n        throw new Error(`Error al mejorar el markdown: ${error.message}`);\n      }\n    }\n  }\n  async testConnection() {\n    if (!this.apiKey) {\n      return {\n        success: false,\n        error: 'API key no configurada'\n      };\n    }\n    try {\n      await axios.post(OPENROUTER_API_URL, {\n        model: 'openai/gpt-3.5-turbo',\n        messages: [{\n          role: 'user',\n          content: 'Test connection'\n        }],\n        max_tokens: 10\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n          'HTTP-Referer': window.location.origin,\n          'X-Title': 'Markdown Preview - Test Connection'\n        }\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data, _error$response4$data2;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : (_error$response4$data2 = _error$response4$data.error) === null || _error$response4$data2 === void 0 ? void 0 : _error$response4$data2.message) || error.message\n      };\n    }\n  }\n}\nconst openRouterService = new OpenRouterService();\nexport default openRouterService;","map":{"version":3,"names":["axios","getModelById","OPENROUTER_API_URL","OpenRouterService","constructor","apiKey","process","env","REACT_APP_OPENROUTER_API_KEY","console","warn","improveMarkdown","markdown","prompt","modelId","selectedText","Error","textToImprove","isPartialImprovement","model","maxTokens","systemPrompt","userPrompt","_response$data","_response$data$choice","_response$data$choice2","_response$data$choice3","response","post","messages","role","content","temperature","max_tokens","stream","headers","window","location","origin","data","choices","message","trim","error","_error$response","_error$response2","_error$response3","status","testConnection","success","_error$response4","_error$response4$data","_error$response4$data2","openRouterService"],"sources":["/home/the00b/Escritorio/MD/src/services/openRouterService.js"],"sourcesContent":["import axios from 'axios';\nimport { getModelById } from '../config/models';\n\nconst OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';\n\nclass OpenRouterService {\n  constructor() {\n    this.apiKey = process.env.REACT_APP_OPENROUTER_API_KEY || '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';\n    \n    if (!this.apiKey) {\n      console.warn('OpenRouter API key not found. Please set REACT_APP_OPENROUTER_API_KEY in your environment variables.');\n    }\n  }\n\n  async improveMarkdown(markdown, prompt, modelId, selectedText = null) {\n    if (!this.apiKey) {\n      throw new Error('API key no configurada. Por favor, configura REACT_APP_OPENROUTER_API_KEY en tu archivo .env');\n    }\n\n    const textToImprove = selectedText || markdown;\n    const isPartialImprovement = selectedText !== null;\n    const model = getModelById(modelId);\n    const maxTokens = model ? model.maxTokens : 4000;\n\n    const systemPrompt = isPartialImprovement \n      ? `Eres un experto en escritura y markdown. Mejora SOLO el texto seleccionado manteniendo el formato markdown. Devuelve únicamente el texto mejorado sin explicaciones adicionales.`\n      : `Eres un experto en escritura y markdown. Mejora el documento completo manteniendo la estructura y formato markdown. Devuelve únicamente el markdown mejorado sin explicaciones adicionales.`;\n\n    const userPrompt = prompt \n      ? `${prompt}\\n\\nTexto a mejorar:\\n${textToImprove}`\n      : `Mejora este ${isPartialImprovement ? 'texto' : 'documento markdown'} haciéndolo más claro, coherente y bien estructurado:\\n\\n${textToImprove}`;\n\n    try {\n      const response = await axios.post(\n        OPENROUTER_API_URL,\n        {\n          model: modelId,\n          messages: [\n            {\n              role: 'system',\n              content: systemPrompt\n            },\n            {\n              role: 'user',\n              content: userPrompt\n            }\n          ],\n          temperature: 0.7,\n          max_tokens: maxTokens,\n          stream: false\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`,\n            'Content-Type': 'application/json',\n            'HTTP-Referer': window.location.origin,\n            'X-Title': 'Markdown Preview - Visor Markdown Vitaminado'\n          }\n        }\n      );\n\n      if (response.data?.choices?.[0]?.message?.content) {\n        return response.data.choices[0].message.content.trim();\n      } else {\n        throw new Error('Respuesta inválida del modelo');\n      }\n    } catch (error) {\n      console.error('Error calling OpenRouter API:', error);\n      \n      if (error.response?.status === 401) {\n        throw new Error('API key inválida. Verifica tu configuración.');\n      } else if (error.response?.status === 429) {\n        throw new Error('Límite de rate excedido. Intenta de nuevo en unos momentos.');\n      } else if (error.response?.status === 402) {\n        throw new Error('Créditos insuficientes en tu cuenta de OpenRouter.');\n      } else {\n        throw new Error(`Error al mejorar el markdown: ${error.message}`);\n      }\n    }\n  }\n\n  async testConnection() {\n    if (!this.apiKey) {\n      return { success: false, error: 'API key no configurada' };\n    }\n\n    try {\n      await axios.post(\n        OPENROUTER_API_URL,\n        {\n          model: 'openai/gpt-3.5-turbo',\n          messages: [\n            {\n              role: 'user',\n              content: 'Test connection'\n            }\n          ],\n          max_tokens: 10\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`,\n            'Content-Type': 'application/json',\n            'HTTP-Referer': window.location.origin,\n            'X-Title': 'Markdown Preview - Test Connection'\n          }\n        }\n      );\n\n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.error?.message || error.message \n      };\n    }\n  }\n}\n\nconst openRouterService = new OpenRouterService();\nexport default openRouterService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}